#!/usr/bin/env ruby
#
# Author:: Fletcher Nichol (<fnichol@nichol.ca>)
#
# Copyright (C) 2015 Fletcher Nichol
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "pathname"
require "optparse"
require "open-uri"
require "fileutils"
require "rubygems/package"
require "zlib"
require "tempfile"

def windows?
  @windows ||= RUBY_PLATFORM =~ /mswin|mingw|windows/
end

def habitat
  if windows?
    Pathname.new(File.join(ENV["SYSTEMDRIVE"], "hab", "pkgs"))
  else
    Pathname.new(File.join("/hab", "pkgs"))
  end
end

# find the path to installed package in habitat package directory
# example, /hab/pkgs/{ARGV[0]}/{ARGV[1]}/x.x.x/xxxxxxxxxxxxxx
def pkg_path
  pkg_path = habitat.join(ARGV[0], ARGV[1])
  version = Dir.glob("#{pkg_path}/*").max
  raise "No existing installation found for #{ARGV[0]}/#{ARGV[1]} in #{pkg_path}" if version.nil?

  pkg_path = pkg_path.join(version)
  build_no = Dir.glob("#{pkg_path}/*").max
  raise "No existing installation found for #{ARGV[0]}/#{ARGV[1]}/#{version} in #{pkg_path}" if build_no.nil?

  pkg_path.join(build_no)
end

def vendor_bin_dir
  pkg_path.join("vendor", "bin")
end

def bin_dir
  pkg_path.join("bin")
end

def ruby_pkg
  # NOTE: this is sort of a 'hacky' way maybe to find which ruby binary to use?
  File.read("#{pkg_path}/DEPS").split("\n").find { |l| l.start_with?("core/ruby") }
end

ENV["PATH"] = ( [ bin_dir ] + ENV["PATH"].split(File::PATH_SEPARATOR) ).join(File::PATH_SEPARATOR)

ENV_KEYS = %w{
    BUNDLE_BIN_PATH BUNDLE_GEMFILE GEM_HOME GEM_PATH GEM_ROOT IRBRC MY_RUBY_HOME RUBYLIB RUBYOPT RUBY_ENGINE RUBY_ROOT RUBY_VERSION _ORIGINAL_GEM_PATH PATH
}.freeze

def run(cmd)
  ENV_KEYS.each { |key| ENV["_YOLO_#{key}"] = ENV[key]; ENV.delete(key) }
  ENV["PATH"] = habitat.join(ruby_pkg, "bin").to_s + File::PATH_SEPARATOR + ENV["_YOLO_PATH"]
  puts "    running: #{cmd}"
  output = `#{cmd} 2>&1` # FIXME: bash/zsh-ism, will not work on csh
  unless $?.exited? && $?.exitstatus == 0
    raise("Command [#{cmd}] failed!\n\n---BEGIN OUTPUT--\n#{output}\n---END OUTPUT--\n")
  else
    puts "---BEGIN OUTPUT--\n#{output}\n---END OUTPUT--\n"
  end

  ENV_KEYS.each { |key| ENV[key] = ENV.delete("_YOLO_#{key}") }
end

TAR_LONGLINK = "././@LongLink".freeze

def install_package_dependencies
  banner("Installing Packages")
  case `hab pkg exec #{ARGV[0]}/#{ARGV[1]} ohai platform_family` # rubocop: disable Lint/LiteralAsCondition
  when /debian/
    ENV["DEBIAN_FRONTEND"] = "noninteractive"
    run("apt-get -y update")
    run("apt-get -q -y install build-essential git liblzma-dev zlib1g-dev")
  when /fedora/, /rhel/, /amazon/
    if File.exist?("/usr/bin/dnf")
      run("dnf -y install gcc gcc-c++ make git zlib-devel")
      # lzma-devel has been replaced in fedora 30+ with xz-devel
      run("dnf -y install lzma-devel || dnf -y install xz-devel")
    else
      run("yum -y install gcc gcc-c++ make git zlib-devel lzma-devel")
    end
  when /suse/
    run("zypper --non-interactive install gcc gcc-c++ make git")
  else
    puts "I do not know how to install compilers and git on this platform..."
  end
end

# pure ruby `tar xzf`, handles longlinks and directories ending in '/'
# (http://stackoverflow.com/a/31310593/506908)
def extract_tgz(file, destination = ".")
  # NOTE: THIS IS DELIBERATELY PURE RUBY USING NO NATIVE GEMS AND ONLY
  # THE RUBY STDLIB BY DESIGN
  Gem::Package::TarReader.new( Zlib::GzipReader.open file ) do |tar|
    dest = nil
    tar.each do |entry|
      if entry.full_name == TAR_LONGLINK
        dest = File.join destination, entry.read.strip
        next
      end
      dest ||= File.join destination, entry.full_name
      if entry.directory? || (entry.header.typeflag == "" && entry.full_name.end_with?("/"))
        File.delete dest if File.file? dest
        FileUtils.mkdir_p dest, mode: entry.header.mode, verbose: false
      elsif entry.file? || (entry.header.typeflag == "" && !entry.full_name.end_with?("/"))
        FileUtils.rm_rf dest if File.directory? dest
        File.open dest, "wb" do |f|
          f.print entry.read
        end
        FileUtils.chmod entry.header.mode, dest, verbose: false
      elsif entry.header.typeflag == "2" # Symlink!
        File.symlink entry.header.linkname, dest
      else
        puts "Unknown tar entry: #{entry.full_name} type: #{entry.header.typeflag}."
      end
      dest = nil
    end
  end
end

App = Struct.new(:name, :origin, :bundle_without, :install_commands, :gems) do
  def initialize(*)
    super
    self.gems ||= {}
  end

  def to_s
    name
  end
end

chef_install_command = "#{vendor_bin_dir.join("rake")} install:local"

HABITAT_PACKAGES = [
  App.new(
    "berkshelf",
    "berkshelf/berkshelf",
    "docs changelog",
    "#{vendor_bin_dir.join("rake")} install"
  ),
  App.new(
    "chef-infra-client",
    "chef",
    "server docgen maintenance pry integration ci chefstyle profile",
    chef_install_command,
    {
      "chef" => %w{docgen chefstyle},
      "chef-bin" => %w{development},
      "ohai" =>  %w{development docs debug profile},
      "inspec-core-bin" =>  %w{development},
    }
  ),
  App.new(
    "chef-dk",
    "chef/chef-dk",
    "development test",
    "#{vendor_bin_dir.join("bundle")} install",
    {
      "chef" => %w{docgen chefstyle omnibus_package},
      "foodcritic" => %w{development test},
      "test-kitchen" => %w{changelog debug docs development},
      "inspec" =>  %w{deploy tools maintenance integration},
      "chef-run" => %w{changelog docs debug},
      "chef-cli" =>  %w{changelog docs debug},
      "berkshelf" => %w{changelog docs debug development},
      "chef-bin" => %w{changelog},
      "chef-apply" => %w{changelog},
      "chef-vault" => %w{changelog},
      "ohai" => %w{changelog},
      "opscode-pushy-client" => %w{changelog},
      "cookstyle" => %w{changelog},
    }
  ),
  App.new(
    "chef-vault",
    "chef/chef-vault",
    "development",
    "#{vendor_bin_dir.join("rake")} install"
  ),
  App.new(
    "cookstyle",
    "chef/cookstyle",
    "development debug docs",
    "#{vendor_bin_dir.join("rake")} install"
  ),
  App.new(
    "foodcritic",
    "foodcritic/foodcritic",
    "development",
    "#{vendor_bin_dir.join("rake")} install"
  ),
  App.new(
    "inspec",
    "chef/inspec",
    "test integration tools maintenance deploy",
    "#{vendor_bin_dir.join("rake")} install"
  ),
  App.new(
    "ohai",
    "chef/ohai",
    "development docs debug",
    "#{vendor_bin_dir.join("rake")} install"
  ),
  App.new(
    "test-kitchen",
    "test-kitchen/test-kitchen",
    "changelog integration debug chefstyle docs",
    "#{vendor_bin_dir.join("rake")} install"
  ),
].freeze

class Updater
  attr_reader :app, :ref, :tarball, :origin, :repo, :gems, :install_commands

  def initialize(options)
    @app = options[:app]
    @ref = options[:ref]
    @tarball = options[:tarball]
    @extra_bin_files = options[:extra_bin_files]
    @binstubs_source = options[:binstubs_source]
    @repo = options[:repo] || @app.repo
    @origin = options[:origin] || @app.origin
    @gems = @app.gems
    @install_commands = @app.install_commands
  end

  def start
    if !windows? && Process.uid != 0
      abort "#{$0} needs to be run as root user or with sudo"
    end

    install_package_dependencies

    tmp_dir = Dir.mktmpdir
    banner("Creating #{tmp_dir}/#{app.name} directory")
    app_dir = File.join(tmp_dir, app.name.to_s)

    begin
      if  tarball
        # NOTE: THIS IS DELIBERATELY PURE RUBY USING NO NATIVE GEMS AND ONLY
        # THE RUBY STDLIB BY DESIGN
        git_url = "https://github.com/#{repo}/archive/#{ref}.tar.gz"
        banner("Extracting #{app} from #{git_url}")
        Dir.chdir(tmp_dir) do
          Tempfile.open("appbundle-updater") do |tempfile|
            tempfile.binmode
            URI.open(git_url) do |uri|
              tempfile.write(uri.read)
            end
            tempfile.close
            extract_tgz(tempfile.path)
          end
          base = File.basename repo
          FileUtils.mv Dir.glob("#{base}-*")[0], app.name.to_s
        end
      else
        git_url = "https://github.com/#{repo}.git"
        banner("Cloning #{app} from #{git_url}")
        run("git clone #{git_url} #{app_dir}")

        banner("Checking out #{app} to #{ref}")
        Dir.chdir(app_dir) do
          run("git checkout #{ref}")
        end
      end

      banner("Installing dependencies")
      Dir.chdir(app_dir) do
        cmd = "#{vendor_bin_dir.join("bundle")} install"
        cmd += " --without #{app.bundle_without}" if app.bundle_without
        ruby(cmd)
      end

      banner("Re-installing git-installed gems")
      Dir.chdir(app_dir) do
        ruby("post-bundle-install.rb #{bin_dir}") if File.exist?("#{app_dir}/post-bundle-install.rb")
      end

      banner("Installing gem")
      Dir.chdir(app_dir) do
        Array(install_commands).each do |command|
          ruby(command)
        end
      end

      banner("Updating appbundler binstubs for #{app}")
      if gems.empty?
        Dir.chdir(app_dir) do
          cmd = "#{vendor_bin_dir.join("appbundler")} #{app_dir} #{bin_dir}"
          cmd += " --extra-bin-files #{@extra_bin_files}" if @extra_bin_files
          cmd += " --binstubs-source #{@binstubs_source}" if @binstubs_source
          ruby(cmd)
        end
      else
        gems.each do |gem_name, without|
          Dir.chdir(app_dir) do
            cmd = "#{vendor_bin_dir.join("appbundler")} #{app_dir} #{bin_dir} #{gem_name}"
            cmd += " --without #{without.join(",")}" if without
            cmd += " --extra-bin-files #{@extra_bin_files}" if @extra_bin_files
            cmd += " --binstubs-source #{@binstubs_source}" if @binstubs_source
            ruby(cmd)
          end
        end
      end

    rescue => e
      puts "aborting!!", e
    else
      banner("Finished!")
    ensure
      banner("Cleaning up #{app_dir}")
      FileUtils.remove_entry app_dir
      banner("Done.")
    end
  end

  private

  def banner(msg)
    puts "-----> #{msg}"
  end

  def ruby(script)
    ruby_cmd = "hab pkg exec #{ruby_pkg} ruby"
    run([ruby_cmd, script].join(" "))
  end

end

class CLI
  def self.options
    new.options
  end

  attr_reader :options, :parser

  def initialize
    @options = {}
    @parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} PROJECT APP_NAME GIT_REF"
      opts.on("-t", "--[no-]tarball", "Do a tarball download instead of git clone") do |t|
        options[:tarball] = t
      end
      opts.on("-g", "--github REPO", "Github repo (e.g. chef/chef) to pull from") do |g|
        options[:repo] = g
      end
      opts.on("-h", "--help", "Prints this help") do
        puts opts
        exit
      end
      opts.on("-E", "--extra-bin-files BIN1,BIN2") do |e|
        options[:extra_bin_files] = e
      end
      opts.on("-B", "--binstubs-source path/to/source") do |e|
        options[:binstubs_source] = e
      end
      opts.separator("")
      opts.separator("App names:")
      HABITAT_PACKAGES.each { |a| opts.separator("    * #{a.name}") }
    end
    @parser.parse!
    validate!
  end

  def validate!
    die("PROJECT APP_NAME GIT_REF options are all required") if ARGV.length < 3
    options[:app] = HABITAT_PACKAGES.find { |a| a.name == ARGV[1] }
    die("Invalid APP_NAME: #{ARGV[1]}") if options[:app].nil?
    options[:ref] = ARGV[2]
  end

  def die(msg)
    $stderr.puts msg
    $stderr.puts parser
    exit 1
  end
end

Updater.new(CLI.options).start
